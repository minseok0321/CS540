import numpy as np
import copy
import heapq

def heuristic(state):
    goal = np.array([1,2,3,4,5,6,7,8,0]).reshape(3,3)
    h_val = 0
    succ = []
    copy = []
    matrix = np.array(state).reshape(3,3)
    
    for i in range(3):
        
        for j in range(3):
            
            if(goal[i][j] != 0):
                
                if(goal[i][j] != matrix[i][j]):
                
                    pos = np.where(matrix == goal[i][j])
                
                    x_index = int(pos[0])
                    y_index = int(pos[1])
                
                    h_val += abs(i - x_index) + abs(j - y_index) #finding the manhattan distance
                    
    return h_val

#Getting all the successors of a specific state
def succ(state):
    succ = []
    
    if(state[4] == 0):
        
        state[3], state[4] = state[4], state[3]
        copy = state.copy()
        succ.append(copy)
        state[3], state[4] = state[4], state[3]
        
        state[1], state[4] = state[4], state[1]
        copy = state.copy()
        succ.append(copy)
        state[1], state[4] = state[4], state[1]
        
        state[5], state[4] = state[4], state[5]
        copy = state.copy()
        succ.append(copy)
        state[5], state[4] = state[4], state[5]
        
        state[7], state[4] = state[4], state[7]
        copy = state.copy()
        succ.append(copy)
        state[7], state[4] = state[4], state[7]
        
    elif(state[0] == 0):
        
        state[0], state[1] = state[1], state[0]
        copy = state.copy()
        succ.append(copy)
        state[0], state[1] = state[1], state[0]
        
        state[0], state[3] = state[3], state[0]
        copy = state.copy()
        succ.append(copy)
        state[0], state[3] = state[3], state[0]
        
    elif(state[2] == 0):
        
        state[2], state[1] = state[1], state[2]
        copy = state.copy()
        succ.append(copy)
        state[2], state[1] = state[1], state[2]
        
        state[2], state[5] = state[5], state[2]
        copy = state.copy()
        succ.append(copy)
        state[2], state[5] = state[5], state[2]
        
    elif(state[6] == 0):
        
        state[6], state[3] = state[3], state[6]
        copy = state.copy()
        succ.append(copy)
        state[6], state[3] = state[3], state[6]
        
        state[6], state[7] = state[7], state[6]
        copy = state.copy()
        succ.append(copy)
        state[6], state[7] = state[7], state[6]
        
    elif(state[8] == 0):
        
        state[8], state[7] = state[7], state[8]
        copy = state.copy()
        succ.append(copy)
        state[8], state[7] = state[7], state[8]
        
        state[8], state[5] = state[5], state[8]
        copy = state.copy()
        succ.append(copy)
        state[8], state[5] = state[5], state[8]
        
    elif(state[1] == 0):
        
        state[1], state[0] = state[0], state[1]
        copy = state.copy()
        succ.append(copy)
        state[1], state[0] = state[0], state[1]
        
        state[1], state[2] = state[2], state[1]
        copy = state.copy()
        succ.append(copy)
        state[1], state[2] = state[2], state[1]
        
        state[1], state[4] = state[4], state[1]
        copy = state.copy()
        succ.append(copy)
        state[1], state[4] = state[4], state[1]
        
    elif(state[3] == 0):
        
        state[3], state[0] = state[0], state[3]
        copy = state.copy()
        succ.append(copy)
        state[3], state[0] = state[0], state[3]
        
        state[3], state[4] = state[4], state[3]
        copy = state.copy()
        succ.append(copy)
        state[3], state[4] = state[4], state[3]
        
        state[3], state[6] = state[6], state[3]
        copy = state.copy()
        succ.append(copy)
        state[3], state[6] = state[6], state[3]
        
    elif(state[5] == 0):
        
        state[5], state[8] = state[8], state[5]
        copy = state.copy()
        succ.append(copy)
        state[5], state[8] = state[8], state[5]
        
        state[5], state[4] = state[4], state[5]
        copy = state.copy()
        succ.append(copy)
        state[5], state[4] = state[4], state[5]
        
        state[5], state[2] = state[2], state[5]
        copy = state.copy()
        succ.append(copy)
        state[5], state[2] = state[2], state[5]
        
    elif(state[7] == 0):
        
        state[7], state[4] = state[4], state[7]
        copy = state.copy()
        succ.append(copy)
        state[7], state[4] = state[4], state[7]
        
        state[7], state[6] = state[6], state[7]
        copy = state.copy()
        succ.append(copy)
        state[7], state[6] = state[6], state[7]
        
        state[7], state[8] = state[8], state[7]
        copy = state.copy()
        succ.append(copy)
        state[7], state[8] = state[8], state[7]
  
    sort_list = sorted(succ)
    
    return sort_list

#Printing all successors of a state and their huristic value
def print_succ(state):    
    child = succ(state)

    for i in child:
        print(i, " h:", heuristic(i))
        
    return

def solve(state):
    goal = [1, 2, 3, 4, 5, 6, 7, 8, 0] #goal state we want to achieve
    g = 0
    max_length = 0 #max queue length
    initial = (g + heuristic(state), state, (g, heuristic(state), -1)) 
    pq = [] #open list
    closed = {} #closed list
    heapq.heappush(pq, initial)
    
    if len(pq) == 0: #Empty open list should fail and end the function
        print("Failed")
        return
    
    while True:
        current = heapq.heappop(pq) #having a format of (f, state, (g, h, parent))

        """Because if it's already in closed, 
        h is the same but g must be bigger.
        No need to consider."""
    
        if str(current[1]) in closed:
            continue

        closed[str(current[1])] = current[2][2] #storing key(child state) : value(parent state)

        if current[1] == goal: #when the current node that has been popped is a goal state, print the output
            output(current[1], closed)
            print("Max queue length:", max_length)
            break

        child = succ(current[1]) #a list of all successors of a current state
        g += 1
        
        for i in child:
            
            """If a child state is already in the closed,
            it's impossible that the f value for the child
            state could be better than what's in the closed."""
            
            if str(i) in closed:
                continue

            h = heuristic(i)
            f = g + h

            heapq.heappush(pq, (f, i, (g, h, current[1])))
            
        max_length = max(len(pq), max_length)

#Backtracking the path to the goal state
def output(state, path):
    answer = []
    answer.insert(0, state)
    parent = path[str(state)]
    while parent != -1:
        answer.insert(0, parent)
        parent = path[str(parent)]
        
    moves = 0
    for i in answer:
        print(i, " h = ",heuristic(i), " moves: ", moves ,sep='')
        moves += 1
